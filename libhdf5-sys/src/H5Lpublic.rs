/* automatically generated by rust-bindgen */

pub type Enum_H5Lpublic_Unnamed1 = ::libc::c_int;
pub const H5L_TYPE_ERROR: ::libc::c_int = -1;
pub const H5L_TYPE_HARD: ::libc::c_int = 0;
pub const H5L_TYPE_SOFT: ::libc::c_int = 1;
pub const H5L_TYPE_EXTERNAL: ::libc::c_int = 64;
pub const H5L_TYPE_MAX: ::libc::c_int = 255;
pub type H5L_type_t = Enum_H5Lpublic_Unnamed1;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_H5Lpublic_Unnamed2 {
    pub _type: H5L_type_t,
    pub corder_valid: hbool_t,
    pub corder: int64_t,
    pub cset: H5T_cset_t,
    pub u: Union_H5Lpublic_Unnamed3,
}
impl ::std::clone::Clone for Struct_H5Lpublic_Unnamed2 {
    fn clone(&self) -> Struct_H5Lpublic_Unnamed2 { *self }
}
impl ::std::default::Default for Struct_H5Lpublic_Unnamed2 {
    fn default() -> Struct_H5Lpublic_Unnamed2 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_H5Lpublic_Unnamed3 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_H5Lpublic_Unnamed3 {
    pub unsafe fn address(&mut self) -> *mut haddr_t {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn val_size(&mut self) -> *mut size_t {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::clone::Clone for Union_H5Lpublic_Unnamed3 {
    fn clone(&self) -> Union_H5Lpublic_Unnamed3 { *self }
}
impl ::std::default::Default for Union_H5Lpublic_Unnamed3 {
    fn default() -> Union_H5Lpublic_Unnamed3 { unsafe { ::std::mem::zeroed() } }
}
pub type H5L_info_t = Struct_H5Lpublic_Unnamed2;
pub type H5L_create_func_t =
    ::std::option::Option<extern "C" fn(link_name: *const ::libc::c_char,
                                        loc_group: hid_t,
                                        lnkdata: *const ::libc::c_void,
                                        lnkdata_size: size_t, lcpl_id: hid_t)
                              -> herr_t>;
pub type H5L_move_func_t =
    ::std::option::Option<extern "C" fn(new_name: *const ::libc::c_char,
                                        new_loc: hid_t,
                                        lnkdata: *const ::libc::c_void,
                                        lnkdata_size: size_t) -> herr_t>;
pub type H5L_copy_func_t =
    ::std::option::Option<extern "C" fn(new_name: *const ::libc::c_char,
                                        new_loc: hid_t,
                                        lnkdata: *const ::libc::c_void,
                                        lnkdata_size: size_t) -> herr_t>;
pub type H5L_traverse_func_t =
    ::std::option::Option<extern "C" fn(link_name: *const ::libc::c_char,
                                        cur_group: hid_t,
                                        lnkdata: *const ::libc::c_void,
                                        lnkdata_size: size_t, lapl_id: hid_t)
                              -> hid_t>;
pub type H5L_delete_func_t =
    ::std::option::Option<extern "C" fn(link_name: *const ::libc::c_char,
                                        file: hid_t,
                                        lnkdata: *const ::libc::c_void,
                                        lnkdata_size: size_t) -> herr_t>;
pub type H5L_query_func_t =
    ::std::option::Option<extern "C" fn(link_name: *const ::libc::c_char,
                                        lnkdata: *const ::libc::c_void,
                                        lnkdata_size: size_t,
                                        buf: *mut ::libc::c_void,
                                        buf_size: size_t) -> ssize_t>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_H5Lpublic_Unnamed4 {
    pub version: ::libc::c_int,
    pub id: H5L_type_t,
    pub comment: *const ::libc::c_char,
    pub create_func: H5L_create_func_t,
    pub move_func: H5L_move_func_t,
    pub copy_func: H5L_copy_func_t,
    pub trav_func: H5L_traverse_func_t,
    pub del_func: H5L_delete_func_t,
    pub query_func: H5L_query_func_t,
}
impl ::std::clone::Clone for Struct_H5Lpublic_Unnamed4 {
    fn clone(&self) -> Struct_H5Lpublic_Unnamed4 { *self }
}
impl ::std::default::Default for Struct_H5Lpublic_Unnamed4 {
    fn default() -> Struct_H5Lpublic_Unnamed4 { unsafe { ::std::mem::zeroed() } }
}
pub type H5L_class_t = Struct_H5Lpublic_Unnamed4;
pub type H5L_iterate_t =
    ::std::option::Option<extern "C" fn(group: hid_t,
                                        name: *const ::libc::c_char,
                                        info: *const H5L_info_t,
                                        op_data: *mut ::libc::c_void)
                              -> herr_t>;
pub type H5L_elink_traverse_t =
    ::std::option::Option<extern "C" fn(parent_file_name:
                                            *const ::libc::c_char,
                                        parent_group_name:
                                            *const ::libc::c_char,
                                        child_file_name:
                                            *const ::libc::c_char,
                                        child_object_name:
                                            *const ::libc::c_char,
                                        acc_flags: *mut ::libc::c_uint,
                                        fapl_id: hid_t,
                                        op_data: *mut ::libc::c_void)
                              -> herr_t>;

extern "C" {
    pub fn H5Lmove(src_loc: hid_t, src_name: *const ::libc::c_char,
                   dst_loc: hid_t, dst_name: *const ::libc::c_char,
                   lcpl_id: hid_t, lapl_id: hid_t) -> herr_t;
    pub fn H5Lcopy(src_loc: hid_t, src_name: *const ::libc::c_char,
                   dst_loc: hid_t, dst_name: *const ::libc::c_char,
                   lcpl_id: hid_t, lapl_id: hid_t) -> herr_t;
    pub fn H5Lcreate_hard(cur_loc: hid_t, cur_name: *const ::libc::c_char,
                          dst_loc: hid_t, dst_name: *const ::libc::c_char,
                          lcpl_id: hid_t, lapl_id: hid_t) -> herr_t;
    pub fn H5Lcreate_soft(link_target: *const ::libc::c_char,
                          link_loc_id: hid_t,
                          link_name: *const ::libc::c_char, lcpl_id: hid_t,
                          lapl_id: hid_t) -> herr_t;
    pub fn H5Ldelete(loc_id: hid_t, name: *const ::libc::c_char,
                     lapl_id: hid_t) -> herr_t;
    pub fn H5Ldelete_by_idx(loc_id: hid_t, group_name: *const ::libc::c_char,
                            idx_type: H5_index_t, order: H5_iter_order_t,
                            n: hsize_t, lapl_id: hid_t) -> herr_t;
    pub fn H5Lget_val(loc_id: hid_t, name: *const ::libc::c_char,
                      buf: *mut ::libc::c_void, size: size_t, lapl_id: hid_t)
     -> herr_t;
    pub fn H5Lget_val_by_idx(loc_id: hid_t, group_name: *const ::libc::c_char,
                             idx_type: H5_index_t, order: H5_iter_order_t,
                             n: hsize_t, buf: *mut ::libc::c_void,
                             size: size_t, lapl_id: hid_t) -> herr_t;
    pub fn H5Lexists(loc_id: hid_t, name: *const ::libc::c_char,
                     lapl_id: hid_t) -> htri_t;
    pub fn H5Lget_info(loc_id: hid_t, name: *const ::libc::c_char,
                       linfo: *mut H5L_info_t, lapl_id: hid_t) -> herr_t;
    pub fn H5Lget_info_by_idx(loc_id: hid_t,
                              group_name: *const ::libc::c_char,
                              idx_type: H5_index_t, order: H5_iter_order_t,
                              n: hsize_t, linfo: *mut H5L_info_t,
                              lapl_id: hid_t) -> herr_t;
    pub fn H5Lget_name_by_idx(loc_id: hid_t,
                              group_name: *const ::libc::c_char,
                              idx_type: H5_index_t, order: H5_iter_order_t,
                              n: hsize_t, name: *mut ::libc::c_char,
                              size: size_t, lapl_id: hid_t) -> ssize_t;
    pub fn H5Literate(grp_id: hid_t, idx_type: H5_index_t,
                      order: H5_iter_order_t, idx: *mut hsize_t,
                      op: H5L_iterate_t, op_data: *mut ::libc::c_void)
     -> herr_t;
    pub fn H5Literate_by_name(loc_id: hid_t,
                              group_name: *const ::libc::c_char,
                              idx_type: H5_index_t, order: H5_iter_order_t,
                              idx: *mut hsize_t, op: H5L_iterate_t,
                              op_data: *mut ::libc::c_void, lapl_id: hid_t)
     -> herr_t;
    pub fn H5Lvisit(grp_id: hid_t, idx_type: H5_index_t,
                    order: H5_iter_order_t, op: H5L_iterate_t,
                    op_data: *mut ::libc::c_void) -> herr_t;
    pub fn H5Lvisit_by_name(loc_id: hid_t, group_name: *const ::libc::c_char,
                            idx_type: H5_index_t, order: H5_iter_order_t,
                            op: H5L_iterate_t, op_data: *mut ::libc::c_void,
                            lapl_id: hid_t) -> herr_t;
    pub fn H5Lcreate_ud(link_loc_id: hid_t, link_name: *const ::libc::c_char,
                        link_type: H5L_type_t, udata: *const ::libc::c_void,
                        udata_size: size_t, lcpl_id: hid_t, lapl_id: hid_t)
     -> herr_t;
    pub fn H5Lregister(cls: *const H5L_class_t) -> herr_t;
    pub fn H5Lunregister(id: H5L_type_t) -> herr_t;
    pub fn H5Lis_registered(id: H5L_type_t) -> htri_t;
    pub fn H5Lunpack_elink_val(ext_linkval: *const ::libc::c_void,
                               link_size: size_t, flags: *mut ::libc::c_uint,
                               filename: *mut *const ::libc::c_char,
                               obj_path: *mut *const ::libc::c_char)
     -> herr_t;
    pub fn H5Lcreate_external(file_name: *const ::libc::c_char,
                              obj_name: *const ::libc::c_char,
                              link_loc_id: hid_t,
                              link_name: *const ::libc::c_char,
                              lcpl_id: hid_t, lapl_id: hid_t) -> herr_t;
}
