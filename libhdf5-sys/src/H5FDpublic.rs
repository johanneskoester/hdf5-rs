/* automatically generated by rust-bindgen */

pub type H5FD_mem_t = Enum_H5F_mem_t;
pub type H5FD_t = Struct_H5FD_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_H5FD_class_t {
    pub name: *const ::libc::c_char,
    pub maxaddr: haddr_t,
    pub fc_degree: H5F_close_degree_t,
    pub sb_size: ::std::option::Option<extern "C" fn(file: *mut H5FD_t)
                                           -> hsize_t>,
    pub sb_encode: ::std::option::Option<extern "C" fn(file: *mut H5FD_t,
                                                       name:
                                                           *mut ::libc::c_char,
                                                       p:
                                                           *mut ::libc::c_uchar)
                                             -> herr_t>,
    pub sb_decode: ::std::option::Option<extern "C" fn(f: *mut H5FD_t,
                                                       name:
                                                           *const ::libc::c_char,
                                                       p:
                                                           *const ::libc::c_uchar)
                                             -> herr_t>,
    pub fapl_size: size_t,
    pub fapl_get: ::std::option::Option<extern "C" fn(file: *mut H5FD_t)
                                            -> *mut ::libc::c_void>,
    pub fapl_copy: ::std::option::Option<extern "C" fn(fapl:
                                                           *const ::libc::c_void)
                                             -> *mut ::libc::c_void>,
    pub fapl_free: ::std::option::Option<extern "C" fn(fapl:
                                                           *mut ::libc::c_void)
                                             -> herr_t>,
    pub dxpl_size: size_t,
    pub dxpl_copy: ::std::option::Option<extern "C" fn(dxpl:
                                                           *const ::libc::c_void)
                                             -> *mut ::libc::c_void>,
    pub dxpl_free: ::std::option::Option<extern "C" fn(dxpl:
                                                           *mut ::libc::c_void)
                                             -> herr_t>,
    pub open: ::std::option::Option<extern "C" fn(name: *const ::libc::c_char,
                                                  flags: ::libc::c_uint,
                                                  fapl: hid_t,
                                                  maxaddr: haddr_t)
                                        -> *mut H5FD_t>,
    pub close: ::std::option::Option<extern "C" fn(file: *mut H5FD_t)
                                         -> herr_t>,
    pub cmp: ::std::option::Option<extern "C" fn(f1: *const H5FD_t,
                                                 f2: *const H5FD_t)
                                       -> ::libc::c_int>,
    pub query: ::std::option::Option<extern "C" fn(f1: *const H5FD_t,
                                                   flags:
                                                       *mut ::libc::c_ulong)
                                         -> herr_t>,
    pub get_type_map: ::std::option::Option<extern "C" fn(file: *const H5FD_t,
                                                          type_map:
                                                              *mut H5FD_mem_t)
                                                -> herr_t>,
    pub alloc: ::std::option::Option<extern "C" fn(file: *mut H5FD_t,
                                                   _type: H5FD_mem_t,
                                                   dxpl_id: hid_t,
                                                   size: hsize_t) -> haddr_t>,
    pub free: ::std::option::Option<extern "C" fn(file: *mut H5FD_t,
                                                  _type: H5FD_mem_t,
                                                  dxpl_id: hid_t,
                                                  addr: haddr_t,
                                                  size: hsize_t) -> herr_t>,
    pub get_eoa: ::std::option::Option<extern "C" fn(file: *const H5FD_t,
                                                     _type: H5FD_mem_t)
                                           -> haddr_t>,
    pub set_eoa: ::std::option::Option<extern "C" fn(file: *mut H5FD_t,
                                                     _type: H5FD_mem_t,
                                                     addr: haddr_t)
                                           -> herr_t>,
    pub get_eof: ::std::option::Option<extern "C" fn(file: *const H5FD_t)
                                           -> haddr_t>,
    pub get_handle: ::std::option::Option<extern "C" fn(file: *mut H5FD_t,
                                                        fapl: hid_t,
                                                        file_handle:
                                                            *mut *mut ::libc::c_void)
                                              -> herr_t>,
    pub read: ::std::option::Option<extern "C" fn(file: *mut H5FD_t,
                                                  _type: H5FD_mem_t,
                                                  dxpl: hid_t, addr: haddr_t,
                                                  size: size_t,
                                                  buffer: *mut ::libc::c_void)
                                        -> herr_t>,
    pub write: ::std::option::Option<extern "C" fn(file: *mut H5FD_t,
                                                   _type: H5FD_mem_t,
                                                   dxpl: hid_t, addr: haddr_t,
                                                   size: size_t,
                                                   buffer:
                                                       *const ::libc::c_void)
                                         -> herr_t>,
    pub flush: ::std::option::Option<extern "C" fn(file: *mut H5FD_t,
                                                   dxpl_id: hid_t,
                                                   closing: ::libc::c_uint)
                                         -> herr_t>,
    pub truncate: ::std::option::Option<extern "C" fn(file: *mut H5FD_t,
                                                      dxpl_id: hid_t,
                                                      closing: hbool_t)
                                            -> herr_t>,
    pub lock: ::std::option::Option<extern "C" fn(file: *mut H5FD_t,
                                                  oid: *mut ::libc::c_uchar,
                                                  lock_type: ::libc::c_uint,
                                                  last: hbool_t) -> herr_t>,
    pub unlock: ::std::option::Option<extern "C" fn(file: *mut H5FD_t,
                                                    oid: *mut ::libc::c_uchar,
                                                    last: hbool_t) -> herr_t>,
    pub fl_map: [H5FD_mem_t; 7usize],
}
impl ::std::clone::Clone for Struct_H5FD_class_t {
    fn clone(&self) -> Struct_H5FD_class_t { *self }
}
impl ::std::default::Default for Struct_H5FD_class_t {
    fn default() -> Struct_H5FD_class_t { unsafe { ::std::mem::zeroed() } }
}
pub type H5FD_class_t = Struct_H5FD_class_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_H5FD_free_t {
    pub addr: haddr_t,
    pub size: hsize_t,
    pub next: *mut Struct_H5FD_free_t,
}
impl ::std::clone::Clone for Struct_H5FD_free_t {
    fn clone(&self) -> Struct_H5FD_free_t { *self }
}
impl ::std::default::Default for Struct_H5FD_free_t {
    fn default() -> Struct_H5FD_free_t { unsafe { ::std::mem::zeroed() } }
}
pub type H5FD_free_t = Struct_H5FD_free_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_H5FD_t {
    pub driver_id: hid_t,
    pub cls: *const H5FD_class_t,
    pub fileno: ::libc::c_ulong,
    pub feature_flags: ::libc::c_ulong,
    pub maxaddr: haddr_t,
    pub base_addr: haddr_t,
    pub threshold: hsize_t,
    pub alignment: hsize_t,
}
impl ::std::clone::Clone for Struct_H5FD_t {
    fn clone(&self) -> Struct_H5FD_t { *self }
}
impl ::std::default::Default for Struct_H5FD_t {
    fn default() -> Struct_H5FD_t { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_H5FDpublic_Unnamed1 = ::libc::c_uint;
pub const H5FD_FILE_IMAGE_OP_NO_OP: ::libc::c_uint = 0;
pub const H5FD_FILE_IMAGE_OP_PROPERTY_LIST_SET: ::libc::c_uint = 1;
pub const H5FD_FILE_IMAGE_OP_PROPERTY_LIST_COPY: ::libc::c_uint = 2;
pub const H5FD_FILE_IMAGE_OP_PROPERTY_LIST_GET: ::libc::c_uint = 3;
pub const H5FD_FILE_IMAGE_OP_PROPERTY_LIST_CLOSE: ::libc::c_uint = 4;
pub const H5FD_FILE_IMAGE_OP_FILE_OPEN: ::libc::c_uint = 5;
pub const H5FD_FILE_IMAGE_OP_FILE_RESIZE: ::libc::c_uint = 6;
pub const H5FD_FILE_IMAGE_OP_FILE_CLOSE: ::libc::c_uint = 7;
pub type H5FD_file_image_op_t = Enum_H5FDpublic_Unnamed1;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_H5FDpublic_Unnamed2 {
    pub image_malloc: ::std::option::Option<extern "C" fn(size: size_t,
                                                          file_image_op:
                                                              H5FD_file_image_op_t,
                                                          udata:
                                                              *mut ::libc::c_void)
                                                -> *mut ::libc::c_void>,
    pub image_memcpy: ::std::option::Option<extern "C" fn(dest:
                                                              *mut ::libc::c_void,
                                                          src:
                                                              *const ::libc::c_void,
                                                          size: size_t,
                                                          file_image_op:
                                                              H5FD_file_image_op_t,
                                                          udata:
                                                              *mut ::libc::c_void)
                                                -> *mut ::libc::c_void>,
    pub image_realloc: ::std::option::Option<extern "C" fn(ptr:
                                                               *mut ::libc::c_void,
                                                           size: size_t,
                                                           file_image_op:
                                                               H5FD_file_image_op_t,
                                                           udata:
                                                               *mut ::libc::c_void)
                                                 -> *mut ::libc::c_void>,
    pub image_free: ::std::option::Option<extern "C" fn(ptr:
                                                            *mut ::libc::c_void,
                                                        file_image_op:
                                                            H5FD_file_image_op_t,
                                                        udata:
                                                            *mut ::libc::c_void)
                                              -> herr_t>,
    pub udata_copy: ::std::option::Option<extern "C" fn(udata:
                                                            *mut ::libc::c_void)
                                              -> *mut ::libc::c_void>,
    pub udata_free: ::std::option::Option<extern "C" fn(udata:
                                                            *mut ::libc::c_void)
                                              -> herr_t>,
    pub udata: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_H5FDpublic_Unnamed2 {
    fn clone(&self) -> Struct_H5FDpublic_Unnamed2 { *self }
}
impl ::std::default::Default for Struct_H5FDpublic_Unnamed2 {
    fn default() -> Struct_H5FDpublic_Unnamed2 { unsafe { ::std::mem::zeroed() } }
}
pub type H5FD_file_image_callbacks_t = Struct_H5FDpublic_Unnamed2;

extern "C" {
    pub fn H5FDregister(cls: *const H5FD_class_t) -> hid_t;
    pub fn H5FDunregister(driver_id: hid_t) -> herr_t;
    pub fn H5FDopen(name: *const ::libc::c_char, flags: ::libc::c_uint,
                    fapl_id: hid_t, maxaddr: haddr_t) -> *mut H5FD_t;
    pub fn H5FDclose(file: *mut H5FD_t) -> herr_t;
    pub fn H5FDcmp(f1: *const H5FD_t, f2: *const H5FD_t) -> ::libc::c_int;
    pub fn H5FDquery(f: *const H5FD_t, flags: *mut ::libc::c_ulong)
     -> ::libc::c_int;
    pub fn H5FDalloc(file: *mut H5FD_t, _type: H5FD_mem_t, dxpl_id: hid_t,
                     size: hsize_t) -> haddr_t;
    pub fn H5FDfree(file: *mut H5FD_t, _type: H5FD_mem_t, dxpl_id: hid_t,
                    addr: haddr_t, size: hsize_t) -> herr_t;
    pub fn H5FDget_eoa(file: *mut H5FD_t, _type: H5FD_mem_t) -> haddr_t;
    pub fn H5FDset_eoa(file: *mut H5FD_t, _type: H5FD_mem_t, eoa: haddr_t)
     -> herr_t;
    pub fn H5FDget_eof(file: *mut H5FD_t) -> haddr_t;
    pub fn H5FDget_vfd_handle(file: *mut H5FD_t, fapl: hid_t,
                              file_handle: *mut *mut ::libc::c_void)
     -> herr_t;
    pub fn H5FDread(file: *mut H5FD_t, _type: H5FD_mem_t, dxpl_id: hid_t,
                    addr: haddr_t, size: size_t, buf: *mut ::libc::c_void)
     -> herr_t;
    pub fn H5FDwrite(file: *mut H5FD_t, _type: H5FD_mem_t, dxpl_id: hid_t,
                     addr: haddr_t, size: size_t, buf: *const ::libc::c_void)
     -> herr_t;
    pub fn H5FDflush(file: *mut H5FD_t, dxpl_id: hid_t,
                     closing: ::libc::c_uint) -> herr_t;
    pub fn H5FDtruncate(file: *mut H5FD_t, dxpl_id: hid_t, closing: hbool_t)
     -> herr_t;
}
