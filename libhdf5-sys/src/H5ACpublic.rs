/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Copy)]
pub struct Struct_H5AC_cache_config_t {
    pub version: ::libc::c_int,
    pub rpt_fcn_enabled: hbool_t,
    pub open_trace_file: hbool_t,
    pub close_trace_file: hbool_t,
    pub trace_file_name: [::libc::c_char; 1025usize],
    pub evictions_enabled: hbool_t,
    pub set_initial_size: hbool_t,
    pub initial_size: size_t,
    pub min_clean_fraction: ::libc::c_double,
    pub max_size: size_t,
    pub min_size: size_t,
    pub epoch_length: ::libc::c_long,
    pub incr_mode: Enum_H5C_cache_incr_mode,
    pub lower_hr_threshold: ::libc::c_double,
    pub increment: ::libc::c_double,
    pub apply_max_increment: hbool_t,
    pub max_increment: size_t,
    pub flash_incr_mode: Enum_H5C_cache_flash_incr_mode,
    pub flash_multiple: ::libc::c_double,
    pub flash_threshold: ::libc::c_double,
    pub decr_mode: Enum_H5C_cache_decr_mode,
    pub upper_hr_threshold: ::libc::c_double,
    pub decrement: ::libc::c_double,
    pub apply_max_decrement: hbool_t,
    pub max_decrement: size_t,
    pub epochs_before_eviction: ::libc::c_int,
    pub apply_empty_reserve: hbool_t,
    pub empty_reserve: ::libc::c_double,
    pub dirty_bytes_threshold: ::libc::c_int,
    pub metadata_write_strategy: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_H5AC_cache_config_t {
    fn clone(&self) -> Struct_H5AC_cache_config_t { *self }
}
impl ::std::default::Default for Struct_H5AC_cache_config_t {
    fn default() -> Struct_H5AC_cache_config_t {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type H5AC_cache_config_t = Struct_H5AC_cache_config_t;
