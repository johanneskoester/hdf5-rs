/* automatically generated by rust-bindgen */

pub type H5Z_filter_t = ::libc::c_int;
pub type Enum_H5Z_SO_scale_type_t = ::libc::c_uint;
pub const H5Z_SO_FLOAT_DSCALE: ::libc::c_uint = 0;
pub const H5Z_SO_FLOAT_ESCALE: ::libc::c_uint = 1;
pub const H5Z_SO_INT: ::libc::c_uint = 2;
pub type H5Z_SO_scale_type_t = Enum_H5Z_SO_scale_type_t;
pub type Enum_H5Z_EDC_t = ::libc::c_int;
pub const H5Z_ERROR_EDC: ::libc::c_int = -1;
pub const H5Z_DISABLE_EDC: ::libc::c_int = 0;
pub const H5Z_ENABLE_EDC: ::libc::c_int = 1;
pub const H5Z_NO_EDC: ::libc::c_int = 2;
pub type H5Z_EDC_t = Enum_H5Z_EDC_t;
pub type Enum_H5Z_cb_return_t = ::libc::c_int;
pub const H5Z_CB_ERROR: ::libc::c_int = -1;
pub const H5Z_CB_FAIL: ::libc::c_int = 0;
pub const H5Z_CB_CONT: ::libc::c_int = 1;
pub const H5Z_CB_NO: ::libc::c_int = 2;
pub type H5Z_cb_return_t = Enum_H5Z_cb_return_t;
pub type H5Z_filter_func_t =
    ::std::option::Option<extern "C" fn(filter: H5Z_filter_t,
                                        buf: *mut ::libc::c_void,
                                        buf_size: size_t,
                                        op_data: *mut ::libc::c_void)
                              -> H5Z_cb_return_t>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_H5Z_cb_t {
    pub func: H5Z_filter_func_t,
    pub op_data: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_H5Z_cb_t {
    fn clone(&self) -> Struct_H5Z_cb_t { *self }
}
impl ::std::default::Default for Struct_H5Z_cb_t {
    fn default() -> Struct_H5Z_cb_t { unsafe { ::std::mem::zeroed() } }
}
pub type H5Z_cb_t = Struct_H5Z_cb_t;
pub type H5Z_can_apply_func_t =
    ::std::option::Option<extern "C" fn(dcpl_id: hid_t, type_id: hid_t,
                                        space_id: hid_t) -> htri_t>;
pub type H5Z_set_local_func_t =
    ::std::option::Option<extern "C" fn(dcpl_id: hid_t, type_id: hid_t,
                                        space_id: hid_t) -> herr_t>;
pub type H5Z_func_t =
    ::std::option::Option<extern "C" fn(flags: ::libc::c_uint,
                                        cd_nelmts: size_t,
                                        cd_values: *const ::libc::c_uint,
                                        nbytes: size_t, buf_size: *mut size_t,
                                        buf: *mut *mut ::libc::c_void)
                              -> size_t>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_H5Z_class2_t {
    pub version: ::libc::c_int,
    pub id: H5Z_filter_t,
    pub encoder_present: ::libc::c_uint,
    pub decoder_present: ::libc::c_uint,
    pub name: *const ::libc::c_char,
    pub can_apply: H5Z_can_apply_func_t,
    pub set_local: H5Z_set_local_func_t,
    pub filter: H5Z_func_t,
}
impl ::std::clone::Clone for Struct_H5Z_class2_t {
    fn clone(&self) -> Struct_H5Z_class2_t { *self }
}
impl ::std::default::Default for Struct_H5Z_class2_t {
    fn default() -> Struct_H5Z_class2_t { unsafe { ::std::mem::zeroed() } }
}
pub type H5Z_class2_t = Struct_H5Z_class2_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_H5Z_class1_t {
    pub id: H5Z_filter_t,
    pub name: *const ::libc::c_char,
    pub can_apply: H5Z_can_apply_func_t,
    pub set_local: H5Z_set_local_func_t,
    pub filter: H5Z_func_t,
}
impl ::std::clone::Clone for Struct_H5Z_class1_t {
    fn clone(&self) -> Struct_H5Z_class1_t { *self }
}
impl ::std::default::Default for Struct_H5Z_class1_t {
    fn default() -> Struct_H5Z_class1_t { unsafe { ::std::mem::zeroed() } }
}
pub type H5Z_class1_t = Struct_H5Z_class1_t;
#[link(name = "hdf5")]
extern "C" {
    pub fn H5Zregister(cls: *const ::libc::c_void) -> herr_t;
    pub fn H5Zunregister(id: H5Z_filter_t) -> herr_t;
    pub fn H5Zfilter_avail(id: H5Z_filter_t) -> htri_t;
    pub fn H5Zget_filter_info(filter: H5Z_filter_t,
                              filter_config_flags: *mut ::libc::c_uint)
     -> herr_t;
}
