/* automatically generated by rust-bindgen */

pub type Enum_H5O_type_t = ::libc::c_int;
pub const H5O_TYPE_UNKNOWN: ::libc::c_int = -1;
pub const H5O_TYPE_GROUP: ::libc::c_int = 0;
pub const H5O_TYPE_DATASET: ::libc::c_int = 1;
pub const H5O_TYPE_NAMED_DATATYPE: ::libc::c_int = 2;
pub const H5O_TYPE_NTYPES: ::libc::c_int = 3;
pub type H5O_type_t = Enum_H5O_type_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_H5O_hdr_info_t {
    pub version: ::libc::c_uint,
    pub nmesgs: ::libc::c_uint,
    pub nchunks: ::libc::c_uint,
    pub flags: ::libc::c_uint,
    pub space: Struct_H5Opublic_Unnamed1,
    pub mesg: Struct_H5Opublic_Unnamed2,
}
impl ::std::clone::Clone for Struct_H5O_hdr_info_t {
    fn clone(&self) -> Struct_H5O_hdr_info_t { *self }
}
impl ::std::default::Default for Struct_H5O_hdr_info_t {
    fn default() -> Struct_H5O_hdr_info_t { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_H5Opublic_Unnamed1 {
    pub total: hsize_t,
    pub meta: hsize_t,
    pub mesg: hsize_t,
    pub free: hsize_t,
}
impl ::std::clone::Clone for Struct_H5Opublic_Unnamed1 {
    fn clone(&self) -> Struct_H5Opublic_Unnamed1 { *self }
}
impl ::std::default::Default for Struct_H5Opublic_Unnamed1 {
    fn default() -> Struct_H5Opublic_Unnamed1 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_H5Opublic_Unnamed2 {
    pub present: uint64_t,
    pub shared: uint64_t,
}
impl ::std::clone::Clone for Struct_H5Opublic_Unnamed2 {
    fn clone(&self) -> Struct_H5Opublic_Unnamed2 { *self }
}
impl ::std::default::Default for Struct_H5Opublic_Unnamed2 {
    fn default() -> Struct_H5Opublic_Unnamed2 { unsafe { ::std::mem::zeroed() } }
}
pub type H5O_hdr_info_t = Struct_H5O_hdr_info_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_H5O_info_t {
    pub fileno: ::libc::c_ulong,
    pub addr: haddr_t,
    pub _type: H5O_type_t,
    pub rc: ::libc::c_uint,
    pub atime: time_t,
    pub mtime: time_t,
    pub ctime: time_t,
    pub btime: time_t,
    pub num_attrs: hsize_t,
    pub hdr: H5O_hdr_info_t,
    pub meta_size: Struct_H5Opublic_Unnamed3,
}
impl ::std::clone::Clone for Struct_H5O_info_t {
    fn clone(&self) -> Struct_H5O_info_t { *self }
}
impl ::std::default::Default for Struct_H5O_info_t {
    fn default() -> Struct_H5O_info_t { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_H5Opublic_Unnamed3 {
    pub obj: H5_ih_info_t,
    pub attr: H5_ih_info_t,
}
impl ::std::clone::Clone for Struct_H5Opublic_Unnamed3 {
    fn clone(&self) -> Struct_H5Opublic_Unnamed3 { *self }
}
impl ::std::default::Default for Struct_H5Opublic_Unnamed3 {
    fn default() -> Struct_H5Opublic_Unnamed3 { unsafe { ::std::mem::zeroed() } }
}
pub type H5O_info_t = Struct_H5O_info_t;
pub type H5O_msg_crt_idx_t = uint32_t;
pub type H5O_iterate_t =
    ::std::option::Option<extern "C" fn(obj: hid_t,
                                        name: *const ::libc::c_char,
                                        info: *const H5O_info_t,
                                        op_data: *mut ::libc::c_void)
                              -> herr_t>;
pub type Enum_H5O_mcdt_search_ret_t = ::libc::c_int;
pub const H5O_MCDT_SEARCH_ERROR: ::libc::c_int = -1;
pub const H5O_MCDT_SEARCH_CONT: ::libc::c_int = 0;
pub const H5O_MCDT_SEARCH_STOP: ::libc::c_int = 1;
pub type H5O_mcdt_search_ret_t = Enum_H5O_mcdt_search_ret_t;
pub type H5O_mcdt_search_cb_t =
    ::std::option::Option<extern "C" fn(op_data: *mut ::libc::c_void)
                              -> H5O_mcdt_search_ret_t>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_H5O_stat_t {
    pub size: hsize_t,
    pub free: hsize_t,
    pub nmesgs: ::libc::c_uint,
    pub nchunks: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_H5O_stat_t {
    fn clone(&self) -> Struct_H5O_stat_t { *self }
}
impl ::std::default::Default for Struct_H5O_stat_t {
    fn default() -> Struct_H5O_stat_t { unsafe { ::std::mem::zeroed() } }
}
pub type H5O_stat_t = Struct_H5O_stat_t;
#[link(name = "hdf5")]
extern "C" {
    pub fn H5Oopen(loc_id: hid_t, name: *const ::libc::c_char, lapl_id: hid_t)
     -> hid_t;
    pub fn H5Oopen_by_addr(loc_id: hid_t, addr: haddr_t) -> hid_t;
    pub fn H5Oopen_by_idx(loc_id: hid_t, group_name: *const ::libc::c_char,
                          idx_type: H5_index_t, order: H5_iter_order_t,
                          n: hsize_t, lapl_id: hid_t) -> hid_t;
    pub fn H5Oexists_by_name(loc_id: hid_t, name: *const ::libc::c_char,
                             lapl_id: hid_t) -> htri_t;
    pub fn H5Oget_info(loc_id: hid_t, oinfo: *mut H5O_info_t) -> herr_t;
    pub fn H5Oget_info_by_name(loc_id: hid_t, name: *const ::libc::c_char,
                               oinfo: *mut H5O_info_t, lapl_id: hid_t)
     -> herr_t;
    pub fn H5Oget_info_by_idx(loc_id: hid_t,
                              group_name: *const ::libc::c_char,
                              idx_type: H5_index_t, order: H5_iter_order_t,
                              n: hsize_t, oinfo: *mut H5O_info_t,
                              lapl_id: hid_t) -> herr_t;
    pub fn H5Olink(obj_id: hid_t, new_loc_id: hid_t,
                   new_name: *const ::libc::c_char, lcpl_id: hid_t,
                   lapl_id: hid_t) -> herr_t;
    pub fn H5Oincr_refcount(object_id: hid_t) -> herr_t;
    pub fn H5Odecr_refcount(object_id: hid_t) -> herr_t;
    pub fn H5Ocopy(src_loc_id: hid_t, src_name: *const ::libc::c_char,
                   dst_loc_id: hid_t, dst_name: *const ::libc::c_char,
                   ocpypl_id: hid_t, lcpl_id: hid_t) -> herr_t;
    pub fn H5Oset_comment(obj_id: hid_t, comment: *const ::libc::c_char)
     -> herr_t;
    pub fn H5Oset_comment_by_name(loc_id: hid_t, name: *const ::libc::c_char,
                                  comment: *const ::libc::c_char,
                                  lapl_id: hid_t) -> herr_t;
    pub fn H5Oget_comment(obj_id: hid_t, comment: *mut ::libc::c_char,
                          bufsize: size_t) -> ssize_t;
    pub fn H5Oget_comment_by_name(loc_id: hid_t, name: *const ::libc::c_char,
                                  comment: *mut ::libc::c_char,
                                  bufsize: size_t, lapl_id: hid_t) -> ssize_t;
    pub fn H5Ovisit(obj_id: hid_t, idx_type: H5_index_t,
                    order: H5_iter_order_t, op: H5O_iterate_t,
                    op_data: *mut ::libc::c_void) -> herr_t;
    pub fn H5Ovisit_by_name(loc_id: hid_t, obj_name: *const ::libc::c_char,
                            idx_type: H5_index_t, order: H5_iter_order_t,
                            op: H5O_iterate_t, op_data: *mut ::libc::c_void,
                            lapl_id: hid_t) -> herr_t;
    pub fn H5Oclose(object_id: hid_t) -> herr_t;
}
